version: '3'

services:
  postgres:
    container_name: pg
    image: postgres:13.3
    environment:
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: sa
      POSTGRES_DB: purchaseHistoryApp
      PGPORT: 5435
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 60s
      retries: 3
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - "5435:5435"
    networks:
      - spring-cloud-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - spring-cloud-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
        - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
     test: /bin/kafka-cluster cluster-id --bootstrap-server kafka:29092 || exit 1
     interval: 10s
     timeout: 60s
     start_period: 10s
     retries: 6
    networks:
      - spring-cloud-network

  first-history-app:
    container_name: first-history-app
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: ../history
      dockerfile: ./Dockerfile
    image: history-app:latest
    healthcheck:
      test: "curl http://localhost:8081/history/ping"
      interval: 10s
      timeout: 60s
      start_period: 10s
    environment:
      DATABASE_DRIVER: org.postgresql.Driver
      DATABASE_URL: jdbc:postgresql://pg:5435/purchaseHistoryApp
      DATABASE_USERNAME: sa
      DATABASE_PASSWORD: sa
      DATABASE_DIALECT: org.hibernate.dialect.PostgreSQL9Dialect
    ports:
      - "8084:8084"
    networks:
      - spring-cloud-network

  second-history-app:
    container_name: second-history-app
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: ../history
      dockerfile: ./Dockerfile
    image: history-app:latest
    healthcheck:
      test: "curl http://localhost:8081/history/ping"
      interval: 10s
      timeout: 60s
      start_period: 10s
    environment:
      DATABASE_DRIVER: org.postgresql.Driver
      DATABASE_URL: jdbc:postgresql://pg:5435/purchaseHistoryApp
      DATABASE_USERNAME: sa
      DATABASE_PASSWORD: sa
      DATABASE_DIALECT: org.hibernate.dialect.PostgreSQL9Dialect
    ports:
      - "8088:8088"
    networks:
      - spring-cloud-network

  operations-app:
    container_name: operations-app
    depends_on:
      kafka:
        condition: service_healthy
      first-history-app:
        condition: service_healthy
      second-history-app:
        condition: service_healthy
    build:
      context: ../operations
      dockerfile: ./Dockerfile
    image: operations-app:latest
    environment:
      SERVER_PORT: 8080
    healthcheck:
      test: "curl http://localhost:8080/operations/ping"
      interval: 10s
      timeout: 70s
      start_period: 10s
      retries: 5
    ports:
      - "8080:8080"
    networks:
      - spring-cloud-network


#  generator-app:
#    container_name: generator-app
#    depends_on:
#      postgres:
#        condition: service_healthy
#      first-history-app:
#        condition: service_healthy
#      second-history-app:
#        condition: service_healthy
#    build:
#      context: ../generator
#      dockerfile: ./Dockerfile
#    image: generator-app:latest
#    environment:
#      DATABASE_DRIVER: org.postgresql.Driver
#      DATABASE_URL: jdbc:postgresql://pg:5435/purchaseHistoryApp
#      DATABASE_USERNAME: sa
#      DATABASE_PASSWORD: sa
#    ports:
#      - "8087:8087"
#    networks:
#      - spring-cloud-network

  load-app:
    container_name: load-app
    depends_on:
      operations-app:
        condition: service_healthy
      first-history-app:
        condition: service_healthy
      second-history-app:
        condition: service_healthy
    build:
      context: ../load
      dockerfile: ./Dockerfile
    image: load-app:latest
    ports:
      - "8089:8089"
    networks:
    - spring-cloud-network

networks:
  spring-cloud-network:
    driver: bridge

