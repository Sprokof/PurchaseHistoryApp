version: '3'

services:
  postgres:
    container_name: pg
    image: postgres:13.3
    environment:
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: sa
      POSTGRES_DB: purchaseHistoryApp
      PGPORT: 5435
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 60s
      retries: 3
    ports:
      - "5435:5435"
    networks:
      - spring-cloud-network


  kafka:
    image: bitnami/kafka:3.3.1
    container_name: kafka
    hostname: kafka
    ports:
        - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LISTENERS: PLAINTEXT://:29092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_KRAFT_CLUSTER_ID: r4zt_wrqTRuT7W2NJsB_GA
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:29092 || exit 1
      interval: 10s
      timeout: 60s
      start_period: 10s
      retries: 6
    networks:
      - spring-cloud-network

  first-history-app:
    container_name: first-history-app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    build:
      context: ../history
      dockerfile: ./Dockerfile
    image: history-app:latest
    healthcheck:
      test: "curl http://localhost:8081/history/ping"
      interval: 10s
      timeout: 60s
      start_period: 10s
    environment:
      DATABASE_DRIVER: org.postgresql.Driver
      DATABASE_URL: jdbc:postgresql://pg:5435/purchaseHistoryApp
      DATABASE_USERNAME: sa
      DATABASE_PASSWORD: sa
      DATABASE_DIALECT: org.hibernate.dialect.PostgreSQL9Dialect
    ports:
      - "8084:8084"
    networks:
      - spring-cloud-network

  second-history-app:
    container_name: second-history-app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    build:
      context: ../history
      dockerfile: ./Dockerfile
    image: history-app:latest
    healthcheck:
      test: "curl http://localhost:8081/history/ping"
      interval: 10s
      timeout: 60s
      start_period: 10s
    environment:
      DATABASE_DRIVER: org.postgresql.Driver
      DATABASE_URL: jdbc:postgresql://pg:5435/purchaseHistoryApp
      DATABASE_USERNAME: sa
      DATABASE_PASSWORD: sa
      DATABASE_DIALECT: org.hibernate.dialect.PostgreSQL9Dialect
    ports:
      - "8088:8088"
    networks:
      - spring-cloud-network

  operations-app:
    container_name: operations-app
    depends_on:
      kafka:
        condition: service_healthy
      first-history-app:
        condition: service_healthy
      second-history-app:
        condition: service_healthy
    build:
      context: ../operations
      dockerfile: ./Dockerfile
    image: operations-app:latest
    environment:
      SERVER_PORT: 8080
    healthcheck:
      test: "curl http://localhost:8080/operations/ping"
      interval: 10s
      timeout: 70s
      start_period: 10s
      retries: 5
    ports:
      - "8080:8080"
    networks:
      - spring-cloud-network

  generator-app:
    container_name: generator-app
    depends_on:
      postgres:
        condition: service_healthy
      first-history-app:
        condition: service_healthy
      second-history-app:
        condition: service_healthy
    build:
      context: ../generator
      dockerfile: ./Dockerfile
    image: generator-app:latest
    environment:
      DATABASE_DRIVER: org.postgresql.Driver
      DATABASE_URL: jdbc:postgresql://pg:5435/purchaseHistoryApp
      DATABASE_USERNAME: sa
      DATABASE_PASSWORD: sa
    ports:
      - "8087:8087"
    networks:
      - spring-cloud-network

  load-app:
    container_name: load-app
    depends_on:
      operations-app:
        condition: service_healthy
      first-history-app:
        condition: service_healthy
      second-history-app:
        condition: service_healthy
    build:
      context: ../load
      dockerfile: ./Dockerfile
    image: load-app:latest
    ports:
      - "8089:8089"
    networks:
    - spring-cloud-network

networks:
  spring-cloud-network:
    driver: bridge

